from __future__ import print_function

import math

from IPython import display
from matplotlib import cm
from matplotlib import gridspec
from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
from sklearn import metrics
import tensorflow as tf
from tensorflow.python.data import Dataset

tf.logging.set_verbosity(tf.logging.ERROR)
pd.options.display.max_rows = 10
pd.options.display.float_format = '{:.1f}'.format

california_housing_dataframe = pd.read_csv("https://download.mlcc.google.cn/mledu-datasets/california_housing_train.csv", sep=",")

california_housing_dataframe = california_housing_dataframe.reindex(np.random.permutation(california_housing_datafram.index))

def preprocess_features(california_housing_dataframe):
    """Prepares input features from California housing data set.

    Args:
      california_housing_dataframe: A Pandas DataFrame expected to contain data
        from the California housing data set.
    Returns:
      A DataFrame that contains the features to be used for the model, including
      synthetic features.
    """
    selected_features = california_housing_dataframe[["latitude", "longitude",
    "housing_median_age", "total_rooms", "total_bedrooms", "population",
    "households", "median_income"]]
    processed_features = selected_features.copy()
    # Create a synthetic feature
    processed_features["room_per_person"] = (california_housing_dataframe["total_rooms"] / 
                                              california_housing_dataframe["population"])
    return processed_features
    
def preprocess_targets(california_housing_dataframe):
    """Prepares target features (i.e., labels) from California housing data set.

    Args:
      california_housing_dataframe: A Pandas DataFrame expected to contain data
        from the California housing data set.
    Returns:
      A DataFrame that contains the target feature.
    """
    output_targets = pd.DataFrame()
    # Scale the target to be in units of thousands of dollars
    output_targets["median_house_value"] = california_housing_dataframe["median_house_value"] / 1000.0
    return output_targets
    
# Choose the first 12000 as training set
training_examples = preprocess_features(california_housing_dataframe.head(12000))
training_targets = preprocess_targets(california_housing_dataframe.head(12000))

# Choose the last 5000 as validation set
validation_examples = preprocess_features(california_housing_dataframe.tail(5000))
validation_targets = preprocess_targets(california_housing_dataframe.tail(5000))

# Double-check that we've done the right thing.
print("Training examples summary:")
display.display(training_examples.describe())
print("Validation examples summary:")
display.display(validation_examples.describe())

print("Training targets summary:")
display.display(training_targets.describe())
print("Validation targets summary:")
display.display(validation_targets.describe())

correlation_dataframe = training_examples.copy()
correlation_dataframe['target'] = training_targets["median_house_value"]

### Get correlation metrics
correlation_dataframe.corr()

"""
	latitude	longitude	housing_median_age	total_rooms	total_bedrooms	population	households	median_income	rooms_per_person	target
latitude	1.0	-0.9	0.0	-0.0	-0.1	-0.1	-0.1	-0.1	0.1	-0.1
longitude	-0.9	1.0	-0.1	0.0	0.1	0.1	0.1	-0.0	-0.1	-0.0
housing_median_age	0.0	-0.1	1.0	-0.4	-0.3	-0.3	-0.3	-0.1	-0.1	0.1
total_rooms	-0.0	0.0	-0.4	1.0	0.9	0.9	0.9	0.2	0.1	0.1
total_bedrooms	-0.1	0.1	-0.3	0.9	1.0	0.9	1.0	-0.0	0.0	0.0
population	-0.1	0.1	-0.3	0.9	0.9	1.0	0.9	-0.0	-0.1	-0.0
households	-0.1	0.1	-0.3	0.9	1.0	0.9	1.0	0.0	-0.0	0.1
median_income	-0.1	-0.0	-0.1	0.2	-0.0	-0.0	0.0	1.0	0.2	0.7
rooms_per_person	0.1	-0.1	-0.1	0.1	0.0	-0.1	-0.0	0.2	1.0	0.2
target	-0.1	-0.0	0.1	0.1	0.0	-0.0	0.1	0.7	0.2	1.0
"""

def construct_feature_columns(input_features):
    """Construct the TensorFlow Feature Columns.

    Args:
      input_features: The names of the numerical input features to use.
    Returns:
      A set of feature columns
    """
    return set([tf.feature_column.numeric_column(feature) for feature in input_features])

def my_input_fn(features, targets, batch_size=1, shuffle=True, num_epochs=None):
    """Trains a linear regression model.
  
    Args:
      features: pandas DataFrame of features
      targets: pandas DataFrame of targets
      batch_size: Size of batches to be passed to the model
      shuffle: True or False. Whether to shuffle the data.
      num_epochs: Number of epochs for which data should be repeated. None = repeat indefinitely
    Returns:
      Tuple of (features, labels) for next data batch
    """
    # Convert pandas data into a dict of np.arrays
    features = {key: np.array(value) for key, value in dict(features).items()}
    
    # Construct a dataset of features and targets, and oncfigure batching/repeating
    ds = Dataset.from_tensor_slices((features, targets))
    ds = ds.batch(batch_size).repeat(num_epochs)
    
    # Shuffle the data, if specified
    if shuffle:
        ds = ds.shuffle(10000)
    
    # Return the next batch of data
    features, labels = ds.make_one_shot_iterator().get_next()
    return features, labels

def train_model(learning_rate, steps, batch_size, 
    training_examples, training_targets, validation_examples, validation_targets):
    """Trains a linear regression model.
  
    In addition to training, this function also prints training progress information,
    as well as a plot of the training and validation loss over time.
  
    Args:
      learning_rate: A `float`, the learning rate.
      steps: A non-zero `int`, the total number of training steps. A training step
        consists of a forward and backward pass using a single batch.
      batch_size: A non-zero `int`, the batch size.
      training_examples: A `DataFrame` containing one or more columns from
        `california_housing_dataframe` to use as input features for training.
      training_targets: A `DataFrame` containing exactly one column from
        `california_housing_dataframe` to use as target for training.
      validation_examples: A `DataFrame` containing one or more columns from
        `california_housing_dataframe` to use as input features for validation.
      validation_targets: A `DataFrame` containing exactly one column from
        `california_housing_dataframe` to use as target for validation.
      
    Returns:
      A `LinearRegressor` object trained on the training data.
    """
    period = 10
    steps_per_period = steps / periods
    
    # Create a linear regressor object
    my_optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)
    my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, 5.0)
    linear_regressor = tf.estimator.LinearRegressor(
        feature_columns=construct_feature_columns(training_examples), 
        optimizer=my_optimizer)
    
    # Create input functions
    training_input_fn = lambda: my_input_fn(
        training_examples, training_targets["median_house_value"], batch_size=batch_size)
    predict_training_input_fn = lambda: my_input_fn(
        training_examples, training_targets["median_house_value"], shuffle=False, num_epochs=1)
    predict_validation_input_fn = lambda: my_input_fn(
        validation_examples, validation_targets["median_house_value"], num_epochs=1, shuffle=False)
    
    # Train the model inside a loop and periodically assess loss metrics.
    print("Training model...")
    print("RMSE (on training data):")
    
    
